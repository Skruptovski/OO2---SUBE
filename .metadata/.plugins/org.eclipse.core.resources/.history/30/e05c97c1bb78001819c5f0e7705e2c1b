package datos;

import java.util.GregorianCalendar;
import java.util.List;

import negocio.BoletoABM;
import negocio.BotonColectivoABM;
import negocio.EstacionABM;
import negocio.Funciones;
import negocio.LectorABM;
import negocio.LectorTrenABM;
import negocio.SaldoMinimoABM;
import negocio.SeccionTrenABM;
import negocio.TarjetaABM;
import negocio.TramoTrenABM;
import negocio.UsuarioABM;

public class LectorTren extends Lector{
	private long idLectorTren;
	private boolean salida;
	private Estacion estacion;

	public LectorTren() {}

	public LectorTren(Linea linea,SaldoMinimo saldoMinimo, boolean salida, Estacion estacion) {
		super(linea,saldoMinimo);
		this.salida = salida;
		this.estacion = estacion;
	}

	public long getIdLectorTren() {
		return idLectorTren;
	}

	protected void setIdLectorTren(long idLectorTren) {
		this.idLectorTren = idLectorTren;
	}

	public boolean isSalida() {
		return salida;
	}

	public void setSalida(boolean salida) {
		this.salida = salida;
	}

	public Estacion getEstacion() {
		return estacion;
	}

	public void setEstacion(Estacion estacion) {
		this.estacion = estacion;
	}

	public boolean crearBoleto(Tarjeta tarjeta) throws Exception{
		if (tarjeta.isBaja()) {
			throw new Exception("La tarjeta fue dada de baja");
		}

		/*	si --> LectorEntrada & ListBoletoNull					    --> CobraMaximo					(1)A
		 * 	si --> LectorSalida  & ListBoletoNull 						--> CobraMaximo & nivelRS=1		(2)
		 * 
		 *  si --> LectorEntrada & UltBoleto_NoTren 					--> CobraMaximo					(1)B
		 *  si --> LectorEntrada & UltBoleto_SiTren_LectorEntrada 		--> ERROR						(3)
		 *  si --> LectorEntrada & UltBoleto_SiTren_LectorSalida		--> CobraMaximo & nivelRS=0		(4)

		 *	si --> LectorSalida & UltBoleto_NoTren 						--> CobraMaximo & nivelRS=1		(2)
		 *  si --> LectorSalida & UltBoleto_SiTren_LectorEntrada 		--> Reintegro & nivelRS++		(5)
		 *  si --> LectorSalida & UltBoleto_SiTren_LectorSalida			--> CobraMaximo & nivelRS=1		(2)
		 */


		UsuarioABM uabm = UsuarioABM.getInstanciaUsuarioABM();
		Usuario usuario = null;
		LectorABM labm = LectorABM.getInstanciaLectorABM();
		Linea linea = labm.traerLectorYLinea(this.getIdLector()).getLinea();
		TarjetaABM tarjABM=TarjetaABM.getInstanciaTarjetaABM();
		BoletoABM bABM=BoletoABM.getInstanciaBoletoABM();
		SeccionTrenABM stABM=SeccionTrenABM.getInstanciaSeccionTrenABM();
		SeccionTren st = stABM.traer(3);
		double monto=st.getPrecio();
		double desc=1;
		double multiplicador=1;
		double montoConDescuentos= monto*multiplicador;
		double montoConDescuentosSinRS=montoConDescuentos;
		GregorianCalendar fechaHoraBoleto = new GregorianCalendar();
		GregorianCalendar fechaHoraInicioRSTarjeta = new GregorianCalendar();
		int segsTotales;
		int nivelRS=tarjeta.getNivelRS();
		Boleto boletoAux = null;
		Lector lectorAux = null;
		Linea lineaAux = null;
		TarjetaABM tABM = TarjetaABM.getInstanciaTarjetaABM();
		List<Boleto> listaBoletos=tarjABM.traerBoletosDeTarjeta(tarjeta.getIdTarjeta());
		SaldoMinimoABM smabm = SaldoMinimoABM.getInstanciaSaldoMinimoABM();
		SaldoMinimo saldoMinimo = smabm.traer(1);
		fechaHoraInicioRSTarjeta=tarjeta.getInicioRS();
		int horaIni=Funciones.traerHoras(fechaHoraInicioRSTarjeta);
		int minIni=Funciones.traerMinutos(fechaHoraInicioRSTarjeta);
		int segIni=Funciones.traerSegundos(fechaHoraInicioRSTarjeta);
		int horaActual=Funciones.traerHoras(fechaHoraBoleto);
		int minActual=Funciones.traerMinutos(fechaHoraBoleto);
		int segActual=Funciones.traerSegundos(fechaHoraBoleto);
		segsTotales = (horaActual*3600+minActual*60+segActual)-(horaIni*3600+minIni*60+segIni);
		boolean esRS=false;
		boolean casoLindo=false;

		if(!listaBoletos.isEmpty()){
			boletoAux = listaBoletos.get(listaBoletos.size()-1);
			lectorAux =	bABM.traerBoletoYLector(boletoAux.getIdBoleto()).getLector();
			lineaAux = labm.traerLectorYLinea(lectorAux.getIdLector()).getLinea();
		}
		if(tarjeta.getUsuario()!=null){
			usuario = uabm.traerUsuarioYBeneficio(tarjeta.getUsuario().getIdUsuario());
			Beneficio beneficio = null;		
			if(usuario!=null){
				beneficio = usuario.getBeneficio();	
			}
			if(beneficio instanceof TarifaSocial) {
				montoConDescuentos=((TarifaSocial) usuario.getBeneficio()).getPorcentajeDescuento()*monto;
				montoConDescuentosSinRS=montoConDescuentos;
			}
		}
		if(segsTotales<=7200) {//estamos en RS
			esRS=true;
			if(nivelRS==1) {
				desc=50;
				multiplicador=(100-desc)/100;
			}
			else if(nivelRS==2 || nivelRS==3) {
				desc=75;
				multiplicador=(100-desc)/100;
			}
			else if(nivelRS==4) {
				desc=75;
				multiplicador=(100-desc)/100;
			}
			else if(nivelRS==0) {
				desc=0;
				multiplicador=(100-desc)/100;
				fechaHoraInicioRSTarjeta=fechaHoraBoleto;
			}
		}
		else {
			esRS=false;
			multiplicador=1;
			fechaHoraInicioRSTarjeta=fechaHoraBoleto;
		}
		
		montoConDescuentos=montoConDescuentos*multiplicador;
		
		//if((tarjeta.getSaldo()-montoConDescuentos)<saldoMinimo.getSaldoMinimo())throw new Exception("Saldo insuficiente");

		if((!salida)){
			if (nivelRS==0) {
				tarjeta.setInicioRS(fechaHoraInicioRSTarjeta);
				System.out.println("ENTRADA, MAXIMO. PENDIENTE DEVOLUCION");
			} else {
				if(lineaAux.getLinea().equals(linea.getLinea())) {
					if (!((LectorTren)lectorAux).isSalida()) {
						throw new Exception("NO PODES SALIR POR UN LECTOR DE ENTRADA");
					}
					else {
						if((tarjeta.getSaldo()-montoConDescuentosSinRS)<saldoMinimo.getSaldoMinimo())throw new Exception("Saldo insuficiente");
							tarjeta.setInicioRS(fechaHoraInicioRSTarjeta);
							nivelRS=0;
							multiplicador=1;//lo pone en 1 porq tiene q cobrarlo sin descuento
							System.out.println("ENTRADA, MAXIMO. REINICIO,MISMA LINEA. PENDIENTE DEVOLUCION");
					}
				}
				else{
					/*if(esRS) {
						montoConDescuentos=montoConDescuentos*multiplicador;
					}no es necesario*/
				}
			}
		} else {
			if(lineaAux.getLinea().equals(linea.getLinea())) {
				if (lectorAux instanceof LectorTren && ((LectorTren)lectorAux).isSalida()) {
					//esta saliendo del tren y NO paso antes por la entrada
					tarjeta.setInicioRS(fechaHoraInicioRSTarjeta);
					nivelRS=1;
					multiplicador=1;
					System.out.println("SALIDA,SIN PREVIA ENTRADA. COBRO MAXIMO");
				}else{
					//Esta saliendo del tren y antes paso por la entrada
					nivelRS=nivelRS+1;
					casoLindo=true;
					System.out.println("AL TOQUE");
				}
			}else{
				tarjeta.setInicioRS(fechaHoraInicioRSTarjeta);
				multiplicador=1;
				nivelRS=1;
				System.out.println("SALIDA, PERO CON DIFERENTE LINEA. COBRO MAXIMO");
			}
		}
		montoConDescuentos=montoConDescuentosSinRS*multiplicador;
		tarjeta.setInicioRS(fechaHoraInicioRSTarjeta);
		tarjeta.setNivelRS(nivelRS);
		if(casoLindo) {
			//Calculador de monto segun seccion
			EstacionABM estABM = EstacionABM.getInstanciaEstacionABM();
			TramoTrenABM tramoTrenABM = TramoTrenABM.getInstanciaTramoTrenABM();
			LectorTrenABM lectorTrenABM = LectorTrenABM.getInstanciaLectorTrenABM();
			LectorTren lectT=(LectorTren)lectorAux;
			
			Estacion est1 = estacion;
			Estacion est2 = lectorTrenABM.traer(lectT.getIdLector()).getEstacion();
			
			long id1 = est1.getIdEstacion();
			long id2 = est2.getIdEstacion();
			
			TramoTren tramoTren = tramoTrenABM.traer(id1, id2);
			long idTramoTren = tramoTren.getIdTramoTren();
			SeccionTren seccionTren = tramoTrenABM.traerTramoYSeccion(idTramoTren).getSeccionTren();
			double montoReal = seccionTren.getPrecio();
			System.out.println(montoReal);
			double montoRealConDescuentos=montoReal;
			double montoRealConDescuentosSinRS=montoReal;
			
			if(tarjeta.getUsuario()!=null){
				usuario = uabm.traerUsuarioYBeneficio(tarjeta.getUsuario().getIdUsuario());
				Beneficio beneficio = null;		
				if(usuario!=null){
					beneficio = usuario.getBeneficio();	
				}
				if(beneficio instanceof TarifaSocial) {

					montoRealConDescuentos=((TarifaSocial) usuario.getBeneficio()).getPorcentajeDescuento()*montoReal;
					montoRealConDescuentosSinRS=montoConDescuentos;
				}
			}
			if(esRS){
				montoRealConDescuentos=montoRealConDescuentosSinRS*multiplicador;
			}
			
			double montoAnterior = boletoAux.getMonto();
			double montoConDescuentosAnterior = boletoAux.getMontoConDescuentos();
			double devolucion=montoAnterior-montoReal;
			double devolucionConDescuentos=montoConDescuentosAnterior-montoRealConDescuentos;
			
			tarjeta.setSaldo(tarjeta.getSaldo()+devolucionConDescuentos);
			bABM.agregar(tarjeta,this, devolucion*(-1), devolucionConDescuentos*(-1), fechaHoraBoleto);
			tABM.modificar(tarjeta);
		}
		else{
			tarjeta.setSaldo(tarjeta.getSaldo()-montoConDescuentos);
			bABM.agregar(tarjeta,this, monto, montoConDescuentos, fechaHoraBoleto);
			tABM.modificar(tarjeta);
		}
		return true;
	}

		//(1)A
		/*if((!salida & listaBoletos.isEmpty())){
			if(tarjeta.getUsuario()!=null){
				usuario = uabm.traerUsuarioYBeneficio(tarjeta.getUsuario().getIdUsuario());
				if(usuario.getBeneficio() instanceof TarifaSocial) {

					montoConDescuentos=((TarifaSocial) usuario.getBeneficio()).getPorcentajeDescuento()*monto;
				}
			}

			if((tarjeta.getSaldo()-montoConDescuentos)<saldoMinimo.getSaldoMinimo())throw new Exception("Saldo insuficiente");

			tarjeta.setInicioRS(fechaHoraInicioRSTarjeta);
			tarjeta.setNivelRS(nivelRS);
			tarjeta.setSaldo(tarjeta.getSaldo()-montoConDescuentos);
			bABM.agregar(tarjeta,this, monto, montoConDescuentos, fechaHoraBoleto);
			TarjetaABM tABM = TarjetaABM.getInstanciaTarjetaABM();
			tABM.modificar(tarjeta);
			return true;
		}
		//(1)B
		if(!salida & !lineaAux.getLinea().equals(linea.getLinea())){
			//Calculador de RS
			fechaHoraInicioRSTarjeta=tarjeta.getInicioRS();


			int horaIni=Funciones.traerHoras(fechaHoraInicioRSTarjeta);
			int minIni=Funciones.traerMinutos(fechaHoraInicioRSTarjeta);
			int segIni=Funciones.traerSegundos(fechaHoraInicioRSTarjeta);
			int horaActual=Funciones.traerHoras(fechaHoraBoleto);
			int minActual=Funciones.traerMinutos(fechaHoraBoleto);
			int segActual=Funciones.traerSegundos(fechaHoraBoleto);

			segsTotales = (horaActual*3600+minActual*60+segActual)-(horaIni*3600+minIni*60+segIni);

			if(segsTotales<=7200) {//estamos en RS**************

				if(nivelRS==0) {
					montoConDescuentos = monto;
					fechaHoraInicioRSTarjeta = fechaHoraBoleto;
				}
				else if(nivelRS==1) {
					montoConDescuentos = monto*0.5;
				}
				else if(nivelRS==2 || nivelRS==3 || nivelRS==4) {
					montoConDescuentos = monto*0.25;
				}
			}
			else {
				
			}
			if(tarjeta.getUsuario()!=null){
				usuario = uabm.traerUsuarioYBeneficio(tarjeta.getUsuario().getIdUsuario());
				if(usuario.getBeneficio() instanceof TarifaSocial) {

					montoConDescuentos=((TarifaSocial) usuario.getBeneficio()).getPorcentajeDescuento()*monto;
				}
			}
			if((tarjeta.getSaldo()-montoConDescuentos)<saldoMinimo.getSaldoMinimo())throw new Exception("Saldo insuficiente");

			tarjeta.setInicioRS(fechaHoraInicioRSTarjeta);
			tarjeta.setNivelRS(nivelRS);
			tarjeta.setSaldo(tarjeta.getSaldo()-montoConDescuentos);
			bABM.agregar(tarjeta,this, monto, montoConDescuentos, fechaHoraBoleto);
			tABM.modificar(tarjeta);
			System.out.println("2");
			return true;
		}

		//(2)
		if((salida) || (salida & !lineaAux.getLinea().equals(linea.getLinea())) || (salida & lineaAux.getLinea().equals(linea.getLinea()) & ((LectorTren) lectorAux).isSalida())){
			if(tarjeta.getUsuario()!=null){
				usuario = uabm.traerUsuarioYBeneficio(tarjeta.getUsuario().getIdUsuario());
				if(usuario.getBeneficio() instanceof TarifaSocial) {

					montoConDescuentos=((TarifaSocial) usuario.getBeneficio()).getPorcentajeDescuento()*monto;
				}
			}
			if((tarjeta.getSaldo()-montoConDescuentos)<saldoMinimo.getSaldoMinimo())throw new Exception("Saldo insuficiente");

			tarjeta.setInicioRS(fechaHoraInicioRSTarjeta);
			tarjeta.setNivelRS(1);
			tarjeta.setSaldo(tarjeta.getSaldo()-montoConDescuentos);
			bABM.agregar(tarjeta,this, monto, montoConDescuentos, fechaHoraBoleto);
			tABM.modificar(tarjeta);
			return true;

		}
		//(3)
		if((!salida & lineaAux.getLinea().equals(linea.getLinea()) & !((LectorTren) lectorAux).isSalida())){
			throw new Exception("No puede salir a traves de este lector");
		}
		//(4)
		if((!salida & lineaAux.getLinea().equals(linea.getLinea()) & ((LectorTren) lectorAux).isSalida())){
			if(tarjeta.getUsuario()!=null){
				usuario = uabm.traerUsuarioYBeneficio(tarjeta.getUsuario().getIdUsuario());
				if(usuario.getBeneficio() instanceof TarifaSocial) {

					montoConDescuentos=((TarifaSocial) usuario.getBeneficio()).getPorcentajeDescuento()*monto;
				}
			}

			if((tarjeta.getSaldo()-montoConDescuentos)<saldoMinimo.getSaldoMinimo())throw new Exception("Saldo insuficiente");

			tarjeta.setInicioRS(fechaHoraInicioRSTarjeta);
			tarjeta.setNivelRS(0);
			tarjeta.setSaldo(tarjeta.getSaldo()-montoConDescuentos);
			bABM.agregar(tarjeta,this, monto, montoConDescuentos, fechaHoraBoleto);
			tABM.modificar(tarjeta);
			return true;
		}
		//(5)
		if((salida & lineaAux.getLinea().equals(linea.getLinea()) & !((LectorTren) lectorAux).isSalida())){
			//Calculador de monto segun seccion
			EstacionABM estABM = EstacionABM.getInstanciaEstacionABM();
			TramoTrenABM tramoTrenABM = TramoTrenABM.getInstanciaTramoTrenABM();
			LectorTrenABM lectorTrenABM = LectorTrenABM.getInstanciaLectorTrenABM();
			LectorTren lectT=(LectorTren)lectorAux;
			
			Estacion est1 = estacion;
			Estacion est2 = lectorTrenABM.traer(lectT.getIdLector()).getEstacion();
			
			long id1 = est1.getIdEstacion();
			long id2 = est2.getIdEstacion();
			
			TramoTren tramoTren = tramoTrenABM.traer(id1, id2);
			long idTramoTren = tramoTren.getIdTramoTren();
			SeccionTren seccionTren = tramoTrenABM.traerTramoYSeccion(idTramoTren).getSeccionTren();
			double montoReal = seccionTren.getPrecio();
			double montoRealConDescuentos=0;
			double montoAnterior = boletoAux.getMonto();
			double montoConDescuentosAnterior = boletoAux.getMontoConDescuentos();
			double devolucion=montoAnterior-montoReal;
			
			
			//Calculador de RS
			fechaHoraInicioRSTarjeta=tarjeta.getInicioRS();


			int horaIni=Funciones.traerHoras(fechaHoraInicioRSTarjeta);
			int minIni=Funciones.traerMinutos(fechaHoraInicioRSTarjeta);
			int segIni=Funciones.traerSegundos(fechaHoraInicioRSTarjeta);
			int horaActual=Funciones.traerHoras(fechaHoraBoleto);
			int minActual=Funciones.traerMinutos(fechaHoraBoleto);
			int segActual=Funciones.traerSegundos(fechaHoraBoleto);

			segsTotales = (horaActual*3600+minActual*60+segActual)-(horaIni*3600+minIni*60+segIni);

			if(segsTotales<=7200) {//estamos en RS

				if(nivelRS==0) {
					nivelRS=1;
					
				}
				else if(nivelRS==1) {
					desc=50;
					multiplicador=(100-desc)/100;
					nivelRS++;
				}
				
				else if(nivelRS==2 || nivelRS==3) {
					desc=75;
					multiplicador=(100-desc)/100;
					nivelRS++;
				}
				else if(nivelRS==4) {
					desc=75;
					multiplicador=(100-desc)/100;
					nivelRS=0;
				}
			}
			else {
				desc=1;
				multiplicador=(100-desc)/100;
			}
			
			//Calculador de Beneficio
			if(tarjeta.getUsuario()!=null){
				usuario = uabm.traerUsuarioYBeneficio(tarjeta.getUsuario().getIdUsuario());
				if(usuario.getBeneficio() instanceof TarifaSocial) {
					montoRealConDescuentos=((TarifaSocial) usuario.getBeneficio()).getPorcentajeDescuento()*montoReal;
				}
			}
			montoRealConDescuentos=montoRealConDescuentos*multiplicador;
			double devolucionConDescuentos=montoConDescuentosAnterior-montoRealConDescuentos;
			//seteos y devolucion
			//tarjeta.setInicioRS(fechaHoraInicioRSTarjeta);
			
			tarjeta.setNivelRS(nivelRS);
			tarjeta.setSaldo(tarjeta.getSaldo()+montoConDescuentos);
			bABM.agregar(tarjeta,this, devolucion, devolucionConDescuentos, fechaHoraBoleto);
			tABM.modificar(tarjeta);
			return true;
		}
		
		
	
	
	return true;


}
*/
@Override
public String toString() {
	return "LectorTren [idLectorTren=" + getIdLector() + ", salida=" + salida + "]";
}



}